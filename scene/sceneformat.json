// Notes:
//  - Vector = [X, Y, Z] = [float, float, float] any float value is accepted
//  - Color = [R, G, B] = [float, float, float] values between 0.0 and 1.0
{
  "Render": {
    "Camera": {
      "ImageWidth": int,
      "ImageHeight": int,
      // Camera position
      "Position": Vector,
      // What point the camera is looking at
      "LookAt": Vector,
      // The upward direction of the camera
      "UpDir": Vector, // Default: [0, 1, 0]
      // Field of view in degrees
      "FOV": float, // Default: 53
      // Background color
      "Background": Color

    },
    // Max depth of reflection, if AdaptiveThreshold isn't hit
    "MaxReflection": int,
    // Stop reflection if contribution is below this value
    "AdaptiveThreshold": float64,
    // Color of the scene's ambient light
    "AmbientLight": Color,
    "DirectionalLights": [
      {
        "Color": Color
        "Orientation": Vector,
      },
      ...
    ],
    "PointLights": [
      {
        "Color": Color,
        "Position": Vetor,
        "ConstCoeff": float,
        "LinearCoeff": float,
        "QuadCoeff": float
      },
      ...
    ],
    "SpotLights": [
      {
        "Color": Color
        "Position": Vector
        "Orientation": Vector,
        "Angle": float, // Degrees
        "DropOff": float,
        "FadeAngle": float
      },
      // A square light source that casts soft shadows
      "AreaLights": [
      {
        "Color": Color
        "Position": Vector
        "Orientation": Vector,
        "UpDir": Vector,
        "Size": float, // The width and height
        "Samples": int // Sqrt(#samples you want)
        "ConstCoeff": float,
        "LinearCoeff": float,
        "QuadCoeff": float,
        "Accelerated": bool // Faster but slightly less accurate sometimes
      },
    ]
  },
  "Materials": [
    {
      "Name": string,
      "Emissive": Color,
      "Ambient": Color,
      "Specular": Color,
      "Reflective": Color,
      "Diffuse": Color,
      "Transmissive": Color,
      "Shininess": float,
      "Index": float
    },
    ... // Any number of materials, each with a unique "Name"
  ],
  "Scene": [
    {
      // Transform type affects all SubObjects and may be nested
      "Type": "Transform",
      "Properties": {
        "Translate": Vector,
        // Axis to rotate round
        "RotateAxis": Vector,
        // Degrees to rotate
        "RotateAngle": float,
        "Scale": Vector // Default: [1, 1, 1]
      },
      "SubObjects": [
        {
          // Unit sphere, use transforms to change size and position
          "Type": "Sphere",
          "Properties": {
            // The "Name" of one of the Materials above
            "Material": string
          }
        },
        {
          // Cube of side length 1
          "Type": "Box",
          "Properties": {
            "Material": string
          }
        },
        {
          // Unit square in the XY plane
          "Type": "Square",
          "Properties": {
            "Material": string
          }
        },
        {
          // 3-sided polygon. The clockwise direction of the points is A -> B -> C
          "Type": "Triangle",
          "Properties": {
            "Material": string,
            "PointA": Vector,
            "PointB": Vector,
            "PointC": Vector
          }
        },
        ... // Other objects (possibly including nested trasforms)
      ]
    },
    ... // Other objects at the top level
  ]
}
