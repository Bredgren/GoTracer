// Notes:
//  Vector = [X, Y, Z] = [float, float, float] any float value is accepted
//  Color = [R, G, B] = [float, float, float] values between 0.0 and 1.0
//  Attributes that do not match any listed here are ignored (watch for typos). You
//  can use this as a way to add comments, since json doesn't have comments.
{
  "Global": {
    "Camera": {
      "ImageWidth": int,
      "ImageHeight": int,
      // Camera position
      "Position": Vector,
      // What point the camera is looking at
      "LookAt": Vector,
      // The upward direction of the camera
      "UpDir": Vector, // Default: [0, 1, 0]
      // Field of view in degrees
      "FOV": float, // Default: 53
      // Background color
      "Background": Color
    },
    // Max depth of recursion, if AdaptiveThreshold isn't hit
    "MaxRecursiveDepth": int,
    // Stop recursion if contribution is below this value
    "AdaptiveThreshold": float,
    // Antialiasing is enabled if AAThreshold is > 0. If enabled, 4 primary rays are
    // used per pixel and if the difference in color is above AAThreshold then each
    // of the 4 subpixels is divided and repeated, until at most AAMAxDivisions
    // subdivisions
    "AAMaxDivisions": int,
    "AAThreshold": float,
    // Color of the scene's ambient light
    "AmbientLight": Color,
	},
	"Lights": [
		{
			"Type": "Directional" | "Point" | "Spot", // TODO: Area
			"Color": Color,
			"Position": Vector, // Point, Spot,
			// Where it's pointing
			"Orientation": Vector, // Directional, Spot
      "ConstCoeff": float, // Point
      "LinearCoeff": float, // Point
      "QuadCoeff": float, // Point
			// Degrees
      "Angle": float, // Spot
      "DropOff": float, // Spot
      "FadeAngle": float, // Spot
		},
			...
	],
  "Materials": [
    {
      "Name": string,
			"Parent": string, // Name of another material to inherit attributes from
      // TextureFiles are png or jpeg images.
      "Emissive": Color | TextureFile,
      "Ambient": Color | TextureFile,
      "Specular": Color | TextureFile,
      "Reflective": Color | TextureFile,
      "Diffuse": Color | TextureFile,
      "Transmissive": Color | TextureFile,
      // For the Smoothness and Index textures only the R value of the colors is used.
      "Smoothness": float | TextureFile,
      "Index": float | TextureFile, // Default: refractive index of air (1.0003)
			"Normal": TextureFile, // Normal map
    },
			... // Any number of materials, each with a unique "Name"
  ],
  "Scene": [
    {
      // Transform type affects all SubObjects and may be nested
      "Type": "Transform",
      "Properties": {
        "Translate": Vector,
        // Axis to rotate round
        "RotateAxis": Vector,
        // Degrees to rotate
        "RotateAngle": float,
        "Scale": Vector // Default: [1, 1, 1]
      },
      "SubObjects": [
        {
          // Unit sphere, use transforms to change size and position
          "Type": "Sphere",
          "Properties": {
            // The "Name" of one of the Materials above
            "Material": string
          }
        },
        {
          // Cube of side length 1
          "Type": "Box",
          "Properties": {
            "Material": string
          }
        },
        {
          // Unit square in the XY plane
          "Type": "Square",
          "Properties": {
            "Material": string
          }
        },
        {
          // 3-sided polygon. The clockwise direction of the points is A -> B -> C
          "Type": "Triangle",
          "Properties": {
            "Material": string,
            "PointA": Vector,
            "PointB": Vector,
            "PointC": Vector
          }
        },
        ... // Other objects (possibly including nested trasforms)
      ]
    },
    ... // Other objects at the top level
  ]
}
